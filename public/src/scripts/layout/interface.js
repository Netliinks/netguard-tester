//
//  interface.ts
//
//  Generated by Poll Castillo on 15/02/2023.
//
import { getEntityData, getUserInfo, updateEntity } from "../endpoints.js";
import { getRoutinesTopBar } from "../tools.js";
import { SelectCustomer } from "./selectCustomer/selectCustomer.js";
import { Dashboard } from "../views/dashboard/dashboard.js";
import { SignIn } from "../login.js";
import { Sidebar } from "./sidebar.js";
import { Config } from "../Configs.js";
import { ChangePassword } from "./changePassword/changePassword.js";
import { CloseDialog } from "../tools.js";
import { FirebaseCtrl } from "../services/FirebaseCtrl.js";
let infoPage = {
    count: 0,
    counter: 10,
    newRegister: false,
    countNewRegister: 0,
    timeColor: null,
    audio: new Audio("./public/src/assets/sounds/alert.mp3"),
    timeColorNoti: null,
    audioNoti: new Audio("./public/src/assets/sounds/alarm.mp3")
};
export class RenderApplicationUI {
    constructor() {
        this.loginContainer = document.getElementById('login-container');
        this.APP = document.getElementById('app');
        this.sidebarContainer = document.getElementById('app-sidebar');
        this.topbar = document.getElementById('app-topbar');
    }
    render() {
      this.loginContainer.style.display = 'none';
      this.APP.style.display = 'grid';
      this.sidebarContainer.style.display = 'inline-flex';
      this.topbar.style.display = 'flex';
      this.topbar.style.justifyContent = 'space-between';
      this.renderTopbar();
      new Sidebar().render();
      new Dashboard().render();
      //new SelectCustomer().render();
  }
  async renderTopbar() {
    const customerId = localStorage.getItem('customer_id')
    const tokenMessaging = localStorage.getItem('libreriasjs-notification-token');
    const currentUser = await getUserInfo();
    const user = await getEntityData('User', currentUser.attributes.id);
    Config.currentUser = user;
    let customer = await getEntityData('Customer', customerId);
    renderRoutines(customer.business.id);
    let topbar = this.topbar.innerHTML = `
        <div class="user">
            <div class="settings_button">
             <button id="button-routine-topbar">
               <i class="fa-solid fa-alarm-clock" id="icon-routine-topbar" style="font-size:15px; color:rgb(38, 35, 58);"></i>
             </button>
            </div>
            <div class="nameAndCustomer">
                <p id="routine-title-topbar" class="name" style="color: rgb(112, 111, 142);">
                Rutinas no cumplidas
                </p>
                <p id="routine-message-topbar" class="customer">Ninguna</p>
            </div>
        </div>
        <div id="menuAlert"></div>
         
    `;
    this.topbar.innerHTML = topbar;
    const divMenu = document.getElementById('menuAlert');
    const defaultMenu = () => {
        const userMenu =  `
        <div class="user">
            <span class="welcome">Bienvenido</span>
            <span class="separator"></span>
            <div class="userAvatar">
                <i class="fa-solid fa-user"></i>
            </div>
            <div class="nameAndCustomer">
                <p id="current-username" class="name">
                ${user.firstName} ${user.lastName}
                </p>
                <p id="current-user-customer" class="customer">${user.username}</p>
                <p >${customer.name ? customer.name : 'Seleccione una empresa'}</p>
            </div>
            <div class="settings_button">
                <button id="settings-button">
                <i class="fa-solid fa-gear"></i>
                </button>
            </div>
            <div class="user_settings" id="user-settings">
                <button class="btn btn_transparent btn_widder" id="permit-notify">🔔 Activar notificaciones</button>
                <button class="btn btn_transparent btn_widder" id="change-customer">Cambiar Empresa</button>
                <!--<button class="btn btn_transparent btn_widder">Preferencias</button>-->
                <button class="btn btn_transparent btn_widder" id="change-password">Cambiar Contraseña</button>
                <br>
                <button class="btn btn_primary btn_widder" id="logout-button">Cerrar sesión</button>
            </div>
        </div>
        `;
        divMenu.innerHTML = userMenu;
        const permitNotify = document.getElementById('permit-notify');
        
        const fireBaseCtrl = new FirebaseCtrl();
        fireBaseCtrl.initApp();
        fireBaseCtrl.onError((errorMessage) => {
            permitNotify.innerText = "❌ Error, reintente"
            permitNotify.disabled= false
            console.log(errorMessage)
        });
        fireBaseCtrl.onGetToken((token) => {
            let raw = JSON.stringify({
                // @ts-ignore
                "webToken": `${token}`,
            });
            updateEntity('User', currentUser.attributes.id, raw).then((res) => {
                console.log("token: "+token)
                permitNotify.innerText = "✔️​ Notificaciones activas"
                permitNotify.disabled= true
            });
        });
        fireBaseCtrl.onRecieveNotification((notificationData) => {
            clearTimeout(infoPage.timeColorNoti);
            //let dialog = confirm(`${notificationData.notification.title} | ${notificationData.notification.body}`);
            let topBarNotification = `
                <div class="user">
                    <span class="welcome" id="titleNotify"style="color:red;">ALERTA</span>
                    <span class="separator"></span>
                    <div class="userAvatar">
                        <button id="okNotification">
                        <i class="fa-solid fa-bell" style="color:red; font-size:20px;"></i>
                        </button>
                    </div>
                    <div class="nameAndCustomer">
                        <p id="current-username" class="name">
                        ${notificationData.notification.title}
                        </p>
                        <p id="current-user-customer" class="customer">${notificationData.notification.body}</p>
                    </div>
                </div>
                
                
            `;
            divMenu.innerHTML = topBarNotification;
            //const audio = document.getElementById("audio");
            const button = document.getElementById("okNotification");
            const titleNotify = document.getElementById("titleNotify");
            infoPage.audioNoti.play();
            infoPage.audioNoti.loop = true;
            let counter = 1000;
            let color = 1;
            let change = async () => {
                if(color == 1){
                    titleNotify.style.color = "red";
                    color = 2;
                }else{
                    titleNotify.style.color = "orange";
                    color = 1;
                }
                infoPage.timeColorNoti = setTimeout(change, counter);
            }
            infoPage.timeColorNoti = setTimeout(change, counter);
            button.addEventListener('click', () => {
                infoPage.audioNoti.pause();
                infoPage.audioNoti.currentTime = 0;
                clearTimeout(infoPage.timeColorNoti);
                //this.renderTopbar();
                defaultMenu();
            });
        });
        const options = document.getElementById('settings-button');
        options.addEventListener('click', () => {
            const settingOptions = document.getElementById('user-settings');
            const changePassword = document.getElementById('change-password');
            const changeCustomer = document.getElementById('change-customer');
            const logoutButton = document.getElementById('logout-button');
            settingOptions.classList.toggle("user_settings_visible");
            
                permitNotify.addEventListener("click", async (event) => {
                    if(tokenMessaging == undefined){
                        try {
                            const permission = await Notification.requestPermission();
                            if (permission !== "granted") {
                                console.log("No se ha aceptado el registro de notificaciones");
                                return;
                            }
                            await fireBaseCtrl.enableWebNotifications();
                        }
                        catch (err) {
                            console.log("Hubo un error", err);
                        }
                        finally {
                            permitNotify.disabled= true
                        }
                    }
                });
            changePassword.addEventListener("click", () => {
                new ChangePassword().render();
                //new CloseDialog().x(settingOptions);
            });
            changeCustomer.addEventListener("click", () => {
                new SelectCustomer().render(0, 1, '');
                //new CloseDialog().x(settingOptions);
            });
            logoutButton.addEventListener("click", () => {
                new SignIn().signOut();
            });
        });
    }
    defaultMenu();
    const btnRoutine = document.getElementById('button-routine-topbar');
    btnRoutine.addEventListener('click', () => {
        clearTimeout(infoPage.timeColor);
        const titleRoutine = document.getElementById('routine-title-topbar');
        const messageRoutine = document.getElementById('routine-message-topbar');
        const iconRoutine = document.getElementById('icon-routine-topbar');
        titleRoutine.style.color = "rgb(112, 111, 142)";
        iconRoutine.style.color = "rgb(38, 35, 58)";
        messageRoutine.innerText = "Ninguna";
        if(infoPage.newRegister){
            infoPage.count= 0;
            infoPage.counter= 10;
            infoPage.newRegister= false;
            infoPage.countNewRegister= 0;
            infoPage.audio.pause();
            renderRoutines(customer.business.id);
        }
        
    });
}
}
const renderSetting = () => {
    const options = document.getElementById('settings-button');
    options.addEventListener('click', () => {
        const settingOptions = document.querySelector("#user-settings");
        const logoutButton = settingOptions.querySelector("#logout");
        settingOptions.classList.toggle("user_settings_visible");
        logoutButton.addEventListener("click", () => {
            new SignIn().signOut();
        });
    });
};
//new Dashboard().render();
const renderRoutines = async (id) => {
    infoPage.counter = 10;
    clearTimeout(infoPage.timeColor);
    clearTimeout(Config.timeRoutineTopBar);
    infoPage.count = await getRoutinesTopBar(id);
    const titleRoutine = document.getElementById('routine-title-topbar');
    const messageRoutine = document.getElementById('routine-message-topbar');
    const iconRoutine = document.getElementById('icon-routine-topbar');
    
    const alarm = async () => {
        clearTimeout(infoPage.timeColor);
        clearTimeout(Config.timeRoutineTopBar);
        if(infoPage.counter == Config.timeReolad){
            const newRegisters = await getRoutinesTopBar(id)
            if(!isNaN(newRegisters)){
                //console.log(infoPage.count);
                //console.log(newRegisters);
                if(newRegisters > infoPage.count){
                    //console.log("routines updates detected")
                    infoPage.newRegister = true;
                    infoPage.countNewRegister = newRegisters - infoPage.count;
                    messageRoutine.innerText = `Se han detectado ${infoPage.countNewRegister}`;
                    infoPage.audio.play();
                    infoPage.audio.loop = true;
                    const counter = 1000;
                    let color = 1;
                    let changeColor = async () => {
                        if(color == 1){
                            titleRoutine.style.color = "red";
                            iconRoutine.style.color = "red";
                            color = 2;
                        }else{
                            titleRoutine.style.color = "orange";
                            iconRoutine.style.color = "orange";
                            color = 1;
                        }
                        infoPage.timeColor = setTimeout(changeColor, counter);
                    }
                    infoPage.timeColor = setTimeout(changeColor, counter);
                }else{
                    //console.log("routines no updates")
                }
            }else{
                messageRoutine.innerText = `Error ${newRegisters}`;
            }
            Config.timeRoutineTopBar = setTimeout(alarm, infoPage.counter);
        }else if(infoPage.counter == 10){
            infoPage.counter = Config.timeReolad;
            Config.timeRoutineTopBar = setTimeout(alarm, infoPage.counter);
        }
    }
    Config.timeRoutineTopBar = setTimeout(alarm, infoPage.counter);
}